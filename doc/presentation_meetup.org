#+Title: Open P2P replication with CRDTs
#+Author: Christian Weilbach
#+Email: christian@replikativ.io

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_Links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_slide_number:t
# +OPTIONS: reveal_width:1420 reveal_height:1080
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.6
#+REVEAL_MAX_SCALE: 1.2
#+REVEAL_TRANS: linear
#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="geschichte, git-like CRDT">
# +REVEAL_PREAMBLE: Applied to lambda
# +REVEAL_POSTAMBLE: <p> Geoglyphs FP-prototype by C. Weilbach </p>


* Overview

* Why?


** Data rules the world
   - most big IT businesses /control/, /own/ and /sell/ =data=
   - /vendor-lockin/ into *DBs/Clouds/application-formats* form of
     /domination/ $\Rightarrow$ /highly profitable/
   - most /important parts/ of software stack now open-source
   - /but/ more data than ever /privatized/ in internet silos
   - APIs = /abonnement/ to your & other people's data
   - somebody else can /apply statistics/ on you
   - but you /cannot/ and /will never know/


** Attempts from free software community

*** P2P solutions
    - e.g. =GNUnet=, =Freenet=, darknet solutions etc. complect
      distributed system with privacy and cryptography \\
      $\Rightarrow$ scale badly \\
      $\Rightarrow$ /avoid data pooling/ for statistics
    - try to solve specific application-level problems in /a
      single-shot/, e.g. =Diaspora=, =Friendica=, =Twister= \\
      $\Rightarrow$ often /lack/ sound distributed semantics/theory \\
      $\Rightarrow$ difficult to change and adapt
    - only /read-scaling/ like =BitTorrent=, =amule=, =IPFS=


*** Backend solutions
    - very /mature/, /feature-rich/ space with countless products
      e.g. =Riak=, =CouchDB=, =Cassandra=, =Datomic= for the data-center
    - scale /very well/, some have well-defined consistency guarantees
      (many though have not, e.g. =MongoDB=, =Redis=, =ElasticSearch=,...)
    - help making the problem *worse* by improving the backend only
      and making the data silos more scalable
    - clients basically only consume views in form of web frontends


*** Blockchains
    - model /strong consistency/
    - core aspect is way *consensus* is reached
      + Proof of Work (Bitcoin)
      + Proof of Stake (Ethereum v2)
      + Proof of Importance (NEM)
      + ...
    - share problems of scaling with strongly consistent systems,
      e.g. Paxos
    - single application through a sound combination of concepts,
      e.g. =bitcoin= blockchain, =ripple=

*** DVCS
    - most code versioned with /well-designed/ and /mature/ systems
      like =git=, =mercurial=, =darcs=
    - cooperation, e.g. through =github=, is very inspiring
    - =git= has /no automated replication/
    - can be used for data, e.g. =JSON=
    - but these force /line-based text-files/ in a filesystem
      structure
    - scale /badly/ with /binary blobs/
    - most data is managed in /mutable/ *places* like SQL
      databases/document stores

# it is often not versioned and cannot be distributed/forked, while
# the code is versioned and kept very safe



** What if...
   - one could /clone/ the application state?
   - could /share (encrypted) application data/ and develop /different/ code-bases
     around it
   - one could alter the state anywhere and don't give up control to a
     single place under somebody else's control?
   - one could do /statistical analysis/ together with the users?


** Summary
   file:free_all_data.jpg

* Problem
#+BEGIN_VERSE
Eng ist die Welt, und das Gehirn ist weit,
Leicht beieinander wohnen die Gedanken,
Doch hart im Raume stoßen sich die Sachen,
Wo eines Platz nimmt, muß das andre rücken,
-- Wallenstein, Schiller
#+END_VERSE



** Distributed Writes to a single place
   - =CAP theorem= catches /tradeoffs/
   - /merging conflicts/ is needed in a /decentral available/ system
   - /distributed writes/ are well-studied
   - but /in practice/ often ad-hoc complected with state structure

# e.g. updates to different parts of the state can conflict semantically etc.

** CAP
    file:cap.png \\
  - but different consistency levels possible
  - strongest available and fault tolerant formalism is /strong
    eventual consistency/



* Composing a solution: replikativ
  - nothing /fundamentally/ new
  - can be used as replication layer e.g. for =react.js= + SQL-like
    =datascript=
  - try to fit /well-proven/ concepts to the problem
  - develop with /browser/ first and don't settle on backend technology
    only $\Rightarrow$ cross-platform:
    - =ClojureScript= for =Browser=,
    - =Clojure= for the =JVM=

** Partition global state space fairly
   - inspired by =Votorola=
   - every user has her /global place/ under her /mail/
   - /authenticate/ without central user-registry in the system
   - create /random ids/ for new repositories to avoid conflicts
#+BEGIN_SRC clojure
{user #{cdvcs-id, or-set-id, ...},
 ...}
#+END_SRC


** Peers
   - /no/ distinction between /servers/ and /clients/
   - =pub-sub= at core, middlewares cover specific aspects of protocol

** Peering
   file:peering.svg


** Propagation
   - /gossip/-like
   - propagation happens like a /wave-front/
   - novelty at least once over all edges to /subscribed/ peers
   - peers need to be able to back metadata-updates up with
     values \\
     $\Rightarrow$ only accepted once /all data is available locally/ \\
     $\Rightarrow$ /no stale reads/ possible

** P2P synchronisation with CRDTs
   - *Conflict-free Replicated DataTypes*
   - /well-studied/ data-types
   - used by industry, e.g. soundcloud,
   - *no synchronisation* needed
   - cannot express /all kinds/ of updates on data-structures,
     e.g. atomic counters
   - /scale/ well
   - so, can we express /repository metadata/ as a =CRDT=?

* CDVCS
  - git for data
  - /reformulated/ in CRDT framework
  - *DAG* + *LCA* on branch heads
#  - all referenced values are stored under =SHA-512= hashes and hence
#    cannot conflict, so the metadata CRDT solves synchronisation


#+BEGIN_NOTES
- online LCA with LRU cache for *O(n)*
- proofed in paper, depends on LCA mostly
#+END_NOTES


** Starting with /git/
   - model state changes with =semi-lattice=
   - /well-understood/ API of =pulling= / =merging= / =committing= etc.
   - develop like a "native" app locally
   - tradeoff of /conflict resolution/
   - no networking or server-side development is needed by developer
     $\Rightarrow$ easier development than current apps
   - but:
     - git has no concept of automatic distribution
     - some operations need to be manually synchronized
     - aborts on conflicts

** Example scenario t=0
#+REVEAL_HTML: <img src="./syncfree-sc-0.png"  style='float: none; margin-left: auto; margin-right: auto; border: none;'/>

** Example scenario t=1
#+REVEAL_HTML: <img src="./syncfree-sc-1.png"  style='float: none; margin-left: auto; margin-right: auto; border: none;'/>

** Example scenario t=2
#+REVEAL_HTML: <img src="./syncfree-sc-2.png"  style='float: none; margin-left: auto; margin-right: auto; border: none;'/>

** Example scenario t=3
#+REVEAL_HTML: <img src="./syncfree-sc-3.png"  style='float: none; margin-left: auto; margin-right: auto; border: none;'/>


** Details
   - /conflict merging/ in CRDT value
   - decoupled from replication
   - merge divergence tradeoffs
   - different consistency scenarios possible

#+BEGIN_NOTES
   - possible to resolve at any point later (but more than MVCC: CouchDB, Riak)
   - availabilty vs. consistency reduce ability to merge (not commit) dependent on number
     + commits in commit-graph or
     + heads in branch (LCA cost)
#+END_NOTES




** Metadata-structure
   - numbers are actually hash-uuids referencing values
#+BEGIN_SRC clojure
  {:commit-graph {10 [], ;; root
                  20 [10],
                  30 [20],
                  40 [10],
                  50 [40 20]}, ;; two parents to merge
   :heads #{30 50},
   ;; some constants + minor stuff ommitted
   }
#+END_SRC


** Commit structure
   - commits subsume an /arbitrary amount/ of transactions
   - transaction is composed of /source-code/ of a function &
     a /parameter value/
   - /both together/ give a description of the intent of update
   - allows linearisation of a database transaction log
     (e.g. Datomic/DataScript)
   - actual state can again be /composed of op-based CRDTs/ and hence
     have trivially mergeable transactions


* Coordination
  - different /coordination schemes/ possible
  - *user-moderated* conflict resolution
  - *data-moderated* conflict resolution (e.g. pull-hooks)
  - addition of *strong consistency protocols* like Paxos or
    blockchain consensus

* Scaling problems
   - /CDVCS divergence/: latency $\Rightarrow$ conflicts $\Rightarrow$ merge-bloat
   - client-peers only need /fraction of state/
   - mobile bandwidth can be /very expensive/
   - needs /hand-crafted/ design for application state like SwiftCloud
   - but optimization still possible with /custom/ datatypes (e.g. Bayou)
     
* Other CRDTs
  - OR-Map
  - LWWR
  - Counter
  - Logoot

* Related work
  - =swarm.js=
  - https://github.com/metasoarous/datsync
  - =SwiftCloud=
  - =Antidote= built on RiakCore (syncfree)
  - http://ipfs.io
  - http://telepat.io

* Next steps
  - closed system with vector clocks
  - implement =B+/hitchhiker tree= as basis
  - implement proper authentication + pub/priv key
  - compose to a closed system: Vector Clocks for garbage collection
  - composition of CRDTs, SNAPSHOT isolation
    + OR-set for write heavy parts of transaction log


#+BEGIN_NOTES
  - eval =swarm.js=
  - Chord
  - robustness
  - The little Prover/ACL2, proofs for CRDTs inside of replikativ.io side-effect system
  - implementation against protocols
#+END_NOTES

* Demo
* References
  - https://github.com/replikativ/replikativ
  - Draft version of Whitepaper: http://arxiv.org/abs/1508.05545
  - Marc Shapiro, Nuno Preguiça, Carlos Baquero, Marek Zawirski, A
    comprehensive study of Convergent and Commutative Replicated Data
    Types
  - Marek Zawirski, Annette Bieniusa, Valter Balegas, Sérgio Duarte,
    Carlos Baquero, et al.. Swift-Cloud: Fault-Tolerant
    Geo-Replication Integrated all the Way to the Client Machine.
  - http://zelea.com/project/votorola/home.html



* Audience feedback :noexport:
  - show database undo feature
  - time travel: reference database from yesterday
